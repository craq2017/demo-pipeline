kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
    pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
  selfLink: /apis/build.openshift.io/v1/namespaces/cicd-demo/buildconfigs/tasks-pipeline
  resourceVersion: '65189998'
  name: tasks-pipeline
  uid: 7f54bc78-7559-4271-a3ea-653850d0facb
  creationTimestamp: '2020-08-17T12:14:00Z'
  managedFields:
    - manager: oc
      operation: Update
      apiVersion: build.openshift.io/v1
      time: '2020-08-17T12:14:00Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:metadata':
          'f:annotations':
            .: {}
            'f:openshift.io/generated-by': {}
            'f:pipeline.alpha.openshift.io/uses': {}
          'f:labels':
            .: {}
            'f:app': {}
            'f:group': {}
            'f:name': {}
            'f:template': {}
        'f:spec':
          'f:runPolicy': {}
          'f:source':
            'f:type': {}
          'f:strategy':
            'f:jenkinsPipelineStrategy':
              .: {}
              'f:env': {}
              'f:jenkinsfile': {}
            'f:type': {}
          'f:triggers': {}
    - manager: openshift-sync-plugin-1.0.45
      operation: Update
      apiVersion: build.openshift.io/v1
      time: '2020-08-17T12:15:35Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:spec':
          'f:nodeSelector': {}
    - manager: openshift-apiserver
      operation: Update
      apiVersion: build.openshift.io/v1
      time: '2020-10-14T14:07:28Z'
      fieldsType: FieldsV1
      fieldsV1:
        'f:status':
          'f:lastVersion': {}
  namespace: cicd-demo
  labels:
    app: cicd-pipeline
    group: cicd
    name: cicd-pipeline
    template: cicd
spec:
  nodeSelector: {}
  output: {}
  resources: {}
  successfulBuildsHistoryLimit: 5
  failedBuildsHistoryLimit: 5
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        def mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

        pipeline {
          agent {
            label 'maven'
          }
          stages {
            stage('Build App') {
              steps {
                git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
                sh "${mvnCmd} install -DskipTests=true"
              }
            }
            stage('Test') {
              steps {
                sh "${mvnCmd} test"
                step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
              }
            }
            stage('Code Analysis') {
              steps {
                script {
                  sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                }
              }
            }
            stage('Archive App') {
              steps {
                sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
              }
            }
            stage('Build Image') {
              steps {
                sh "cp target/openshift-tasks.war target/ROOT.war"
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("bc", "tasks").startBuild("--from-file=target/ROOT.war", "--wait=true")
                    }
                  }
                }
              }
            }
            stage('Deploy DEV') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.DEV_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
            stage('Promote to STAGE?') {
              agent {
                label 'skopeo'
              }
              steps {
                timeout(time:15, unit:'MINUTES') {
                    input message: "Promote to STAGE?", ok: "Promote"
                }

                script {
                  openshift.withCluster() {
                    if (env.ENABLE_QUAY.toBoolean()) {
                      withCredentials([usernamePassword(credentialsId: "${openshift.project()}-quay-cicd-secret", usernameVariable: "QUAY_USER", passwordVariable: "QUAY_PWD")]) {
                        sh "skopeo copy docker://quay.io//tasks-app:latest docker://quay.io//tasks-app:stage --src-creds \"$QUAY_USER:$QUAY_PWD\" --dest-creds \"$QUAY_USER:$QUAY_PWD\" --src-tls-verify=false --dest-tls-verify=false"
                      }
                    } else {
                      openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks:stage")
                    }
                  }
                }
              }
            }
            stage('Deploy STAGE') {
              steps {
                script {
                  openshift.withCluster() {
                    openshift.withProject(env.STAGE_PROJECT) {
                      openshift.selector("dc", "tasks").rollout().latest();
                    }
                  }
                }
              }
            }
          }
        }
      env:
        - name: DEV_PROJECT
          value: dev-demo
        - name: STAGE_PROJECT
          value: stage-demo
        - name: ENABLE_QUAY
          value: 'false'
  postCommit: {}
  source:
    type: None
  triggers:
    - type: GitHub
      github:
        secret: g6H0tfND
    - type: Generic
      generic:
        secret: g6H0tfND
  runPolicy: Serial
status:
  lastVersion: 3
